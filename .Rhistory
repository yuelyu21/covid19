mutate(logit = log(fitted2/(1-fitted2))) %>%
ggplot(., aes(time,logit))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
p1 <- data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted2 = mean(fitted2)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5,size = 1) +
geom_line(aes(bage,Fitted2,color = Vita), linetype = 3，size = 1) + ylab('Probability') +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 3.8, y =0.55, label = "-- -- --Empirical  .. .. ..Predicted")
p2 <- data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted2 = mean(fitted2)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita),size = 1,linetype=5) +
geom_line(aes(time,Fitted2,color = Vita), linetype = 3,size= 1) +
ylab('Probability')+
theme_classic() + theme(legend.position="top") +
annotate("text", x = 7, y =0.38, label = "-- -- --Empirical  .. .. ..Predicted")
p2 + p1
p3 <- ggplot(data, aes(bage,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
p4 <- ggplot(data, aes(time,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
p3+p4
#data$muhat[!is.na(data$infect)]=predict(logit.model,type="response")
pred <- predict(fit2,type="response")
resss = (data$infect - pred)/sqrt(pred*(1-pred))
data$residuals <- resss
p3 <- ggplot(data, aes(bage,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
p4 <- ggplot(data, aes(time,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
p3+p4
fit <- geeglm(infect~vita+ age+ time+ gender+age*time,
data = data, id = id,
family = 'binomial', corstr="exch", std.err="san.se")
#observed value
data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5) +
geom_line(aes(bage,Fitted,color = Vita), linetype = 3) + ylab('Prob') +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita)) +
geom_line(aes(time,Fitted,color = Vita), linetype = 3) +
ylab('Prob')+
theme_classic() + theme(legend.position="top") +
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
fit <- geeglm(infect~vita+ age+ time+ gender+age*time,
data = data, id = id,
family = 'binomial', corstr="exch", std.err="san.se")
data$fitted <- fitted.values(fit)
#observed value
data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5) +
geom_line(aes(bage,Fitted,color = Vita), linetype = 3) + ylab('Prob') +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita)) +
geom_line(aes(time,Fitted,color = Vita), linetype = 3) +
ylab('Prob')+
theme_classic() + theme(legend.position="top") +
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
#observed value
p5 <- data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5) +
geom_line(aes(bage,Fitted,color = Vita), linetype = 3) + ylab('Prob') +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
p6 <- data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita)) +
geom_line(aes(time,Fitted,color = Vita), linetype = 3) +
ylab('Prob')+
theme_classic() + theme(legend.position="top") +
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
p5+p6
#observed value
p5 <- data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5) +
geom_line(aes(bage,Fitted,color = Vita), linetype = 3) + ylab('Prob') +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
p6 <- data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita)) +
geom_line(aes(time,Fitted,color = Vita), linetype = 3) +
ylab('Prob')+
theme_classic() + theme(legend.position="top") +
annotate("text", x = 5, y =0.38, label = "- - -Empirical  . . .Predicted")
p5+p6
#observed value
p5 <- data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5) +
geom_line(aes(bage,Fitted,color = Vita), linetype = 3) + ylab('Prob') +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
p6 <- data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita)) +
geom_line(aes(time,Fitted,color = Vita), linetype = 3) +
ylab('Prob')+
theme_classic() + theme(legend.position="top") +
annotate("text", x = 7, y =0.38, label = "- - -Empirical  . . .Predicted")
p5+p6
((16*sqrt(3)/(15*pi))^2*3.4534+1)^(-1/2)
rep(1:6,250)
data
ggplot(data, aes(id,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(color=vita,size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
p3 <- ggplot(data, aes(bage,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(aes(color=vita),size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
p3 <- ggplot(data, aes(bage,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(aes(color=Vita),size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(aes(color=age),size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(aes(color=age),size = 0.5, alpha = 0.8) +
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(aes(color=age),size = 0.5, alpha = 0.8) +
geom_smooth(aes(id,residuals),method = "loess") +
theme_classic()
geom_smooth(method = "loess") +
theme_classic()
geom_smooth() +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(bage,residuals))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(aes(color=gender),size = 0.5, alpha = 0.8) +
theme_classic()
ggplot(data, aes(id,residuals))+
geom_point(aes(color=Vita),size = 0.5, alpha = 0.8) +
theme_classic()
#observed value
p5 <- data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5) +
geom_line(aes(bage,Fitted,color = Vita), linetype = 3) + ylab('Prob') +
theme_classic() + theme(legend.position="top") +geom_point(aes(bage,Observed,color = Vita))
annotate("text", x = 4, y =0.5, label = "- - -Empirical  . . .Predicted")
p6 <- data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted = mean(fitted)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita)) +
geom_line(aes(time,Fitted,color = Vita), linetype = 3) +
ylab('Prob')+
theme_classic() + theme(legend.position="top") +
annotate("text", x = 7, y =0.38, label = "- - -Empirical  . . .Predicted")
p5+p6
fit2 <- geeglm(infect~vita + bage + time + gender + bage*vita +bage*gender,
data = data, id = id,
family = 'binomial', corstr="exch", std.err="san.se")
data$fitted2 <- fitted.values(fit2)
p1 <- data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted2 = mean(fitted2)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5,size = 1) +
geom_line(aes(bage,Fitted2,color = Vita), linetype = 3，size = 1) + ylab('Probability') +
theme_classic() + theme(legend.position="top") + geom_point(aes(bage,Observed,color = Vita)) +geom_point(aes(bage,Fitted,color = Vita)) +
annotate("text", x = 3.8, y =0.55, label = "-- -- --Empirical  .. .. ..Predicted")
p2 <- data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted2 = mean(fitted2)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita),size = 1,linetype=5) +
geom_line(aes(time,Fitted2,color = Vita), linetype = 3,size= 1) +
ylab('Probability')+  geom_point(aes(time,Observed,color = Vita)) +geom_point(aes(time,Fitted,color = Vita)) +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 7, y =0.38, label = "-- -- --Empirical  .. .. ..Predicted")
p2 + p1
p1 <- data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted2 = mean(fitted2)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5,size = 1) +
geom_line(aes(bage,Fitted2,color = Vita), linetype = 3，size = 1) + ylab('Probability') +
theme_classic() + theme(legend.position="top") + geom_point(aes(bage,Observed,color = Vita)) +geom_point(aes(bage,Fitted,color = Vita)) +
annotate("text", x = 3.8, y =0.55, label = "-- -- --Empirical  .. .. ..Predicted")
p2 <- data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted2 = mean(fitted2)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita),size = 1,linetype=5) +
geom_line(aes(time,Fitted2,color = Vita), linetype = 3,size= 1) +
ylab('Probability')+  geom_point(aes(time,Observed,color = Vita)) +geom_point(aes(time,Fitted2,color = Vita)) +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 7, y =0.38, label = "-- -- --Empirical  .. .. ..Predicted")
p2 + p1
p1 <- data %>% group_by(bage,Vita) %>%
summarise(Observed = mean(infect),Fitted2 = mean(fitted2)) %>%
ggplot() + geom_line(aes(bage,Observed,color = Vita), linetype = 5,size = 1) +
geom_line(aes(bage,Fitted2,color = Vita), linetype = 3，size = 1) + ylab('Probability') +
theme_classic() + theme(legend.position="top") + geom_point(aes(bage,Observed,color = Vita)) +geom_point(aes(bage,Fitted2,color = Vita)) +
annotate("text", x = 3.8, y =0.55, label = "-- -- --Empirical  .. .. ..Predicted")
p2 <- data %>% group_by(time,Vita) %>%
summarise(Observed = mean(infect),Fitted2 = mean(fitted2)) %>%
ggplot() + geom_line(aes(time,Observed,color = Vita),size = 1,linetype=5) +
geom_line(aes(time,Fitted2,color = Vita), linetype = 3,size= 1) +
ylab('Probability')+  geom_point(aes(time,Observed,color = Vita)) +geom_point(aes(time,Fitted2,color = Vita)) +
theme_classic() + theme(legend.position="top") +
annotate("text", x = 7, y =0.38, label = "-- -- --Empirical  .. .. ..Predicted")
p2 + p1
((16*sqrt(3)/(15*pi))^2*7.7555+1)^(-1/2)
exp(-0.6411)
exp(0.2594)
exp(0.2594-0.6411)
0.6411/0.2594
exp(0.0172)
exp(0.1287)
exp(0.1287-0.1978)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
x <- c("a", "b","c", "a", "b", "c", "a")
y <- c(1,4,5,2,3,4,1)
d <- data.frame(x = x, y = y)
counts <- data.frame(x = c("a", "b", "c"), n = c(3, 2, 2))
ggplot() + geom_boxplot(data = d, aes(x = x, y = y)) +
geom_text(data = counts, aes(x = x, y = 6, label = n))
shiny::runApp('C:/Users/98455/Desktop/Second Year/winter_SY/STA141B/Final Project')
?read_csv
runApp('C:/Users/98455/Desktop/Second Year/winter_SY/STA141B/Final Project')
runApp('C:/Users/98455/Desktop/Second Year/winter_SY/STA141B/Final Project')
runApp('C:/Users/98455/Desktop/Second Year/winter_SY/STA141B/Final Project')
runApp('C:/Users/98455/Desktop/Second Year/winter_SY/STA141B/Final Project')
runApp()
runApp()
runApp('C:/Users/98455/Desktop/Second Year/winter_SY/STA141B/Final Project')
library(tidyverse)
library(dplyr)
library(tidyverse)
shiny::runApp('C:/Users/98455/Desktop/Second Year/winter_SY/STA141B/Final Project')
country_name <- 'Australia'
if (country_name == "Canada"|country_name == "Australia"){
country <- geojsonio::geojson_read(paste0(country_name,"-provinces.geojson"), what = "sp")
} else {
country <- geojsonio::geojson_read(paste0(country_name,"-provinces.json"), what = "sp")
}
raw_confirm <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
raw_death <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
countrydata_confirm <- raw_confirm %>%
dplyr::filter(`Country/Region` == country_name) %>% select(1,ncol(raw_confirm)) %>%
rename(Province = `Province/State`,
TotalCases = colnames(raw_confirm)[ncol(raw_confirm)])
countrydata_death <- raw_death %>%
dplyr::filter(`Country/Region` == country_name) %>% select(ncol(raw_death)) %>%
rename(TotalDeaths = colnames(raw_death)[ncol(raw_death)])
countrydata <- cbind(countrydata_confirm,countrydata_death) %>%
dplyr::mutate(Province = as.character(Province)) %>%
dplyr::filter(!Province %in% c("Diamond Princess","Grand Princess"))
cbind(countrydata_confirm,countrydata_death)
?mutate
View(G1_trans_sub_norm_feature_scale)
?as.tibble
cbind(countrydata_confirm,countrydata_death) %>% tibble()
countrydata[province_order,]
countrydata_confirm <- raw_confirm %>%
dplyr::filter(`Country/Region` == country_name) %>% select(1,ncol(raw_confirm)) %>%
rename(Province = `Province/State`,
TotalCases = colnames(raw_confirm)[ncol(raw_confirm)])
countrydata_death <- raw_death %>%
dplyr::filter(`Country/Region` == country_name) %>% select(ncol(raw_death)) %>%
rename(TotalDeaths = colnames(raw_death)[ncol(raw_death)])
countrydata <- cbind(countrydata_confirm,countrydata_death) %>% tibble() %>%
dplyr::mutate(Province = as.character(Province)) %>%
dplyr::filter(!Province %in% c("Diamond Princess","Grand Princess"))
countrydata[,1][countrydata[,1] == "Inner Mongolia"] = "Nei Mongol"
countrydata[,1][countrydata[,1] == "Xinjiang"] = "Xinjiang Uygur"
countrydata[,1][countrydata[,1] == "Tibet"] = "Xizang"
countrydata[,1][countrydata[,1] == "Ningxia"] = "Ningxia Hui"
countrydata <- countrydata %>%
dplyr::filter(Province %in% country$PRO)
if (country_name == "Canada"|country_name == "Australia"){
country <- geojsonio::geojson_read(paste0(country_name,"-provinces.geojson"), what = "sp")
} else {
country <- geojsonio::geojson_read(paste0(country_name,"-provinces.json"), what = "sp")
}
setwd
setwd('C:/Users/98455/Desktop/Second Year/winter_SY/STA141B/Final Project')
if (country_name == "Canada"|country_name == "Australia"){
country <- geojsonio::geojson_read(paste0(country_name,"-provinces.geojson"), what = "sp")
} else {
country <- geojsonio::geojson_read(paste0(country_name,"-provinces.json"), what = "sp")
}
raw_confirm <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
raw_death <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
countrydata_confirm <- raw_confirm %>%
dplyr::filter(`Country/Region` == country_name) %>% select(1,ncol(raw_confirm)) %>%
rename(Province = `Province/State`,
TotalCases = colnames(raw_confirm)[ncol(raw_confirm)])
countrydata_death <- raw_death %>%
dplyr::filter(`Country/Region` == country_name) %>% select(ncol(raw_death)) %>%
rename(TotalDeaths = colnames(raw_death)[ncol(raw_death)])
countrydata <- cbind(countrydata_confirm,countrydata_death) %>% tibble() %>%
dplyr::mutate(Province = as.character(Province)) %>%
dplyr::filter(!Province %in% c("Diamond Princess","Grand Princess"))
countrydata[,1][countrydata[,1] == "Inner Mongolia"] = "Nei Mongol"
countrydata[,1][countrydata[,1] == "Xinjiang"] = "Xinjiang Uygur"
countrydata[,1][countrydata[,1] == "Tibet"] = "Xizang"
countrydata[,1][countrydata[,1] == "Ningxia"] = "Ningxia Hui"
countrydata <- countrydata %>%
dplyr::filter(Province %in% country$PRO)
countrydata
n <- length(country$PRO)
province_order <-
sapply(1:n, function(i) {which(match(countrydata$Province,country$PRO[i]) == 1)}) %>% unlist()
countrydata[province_order,]
list2 <- read_daily_data()
confirm <- list2[[1]]
death <- list2[[2]]
recover <- list2[[3]]
state <- list2[[4]]
state_map <- list2[[5]]
death
death %>%
dplyr::filter(`Country/Region` %in% input$country) %>%
select(`Country/Region`, "1/22/20":ncol(death)) %>%
group_by(`Country/Region`) %>%
summarise_each(funs(sum)) %>%
pivot_longer(-`Country/Region`, names_to = "date", values_to = "num")
death %>%
dplyr::filter(`Country/Region` %in% c('US')) %>%
select(`Country/Region`, "1/22/20":ncol(death)) %>%
group_by(`Country/Region`) %>%
summarise_each(funs(sum)) %>%
pivot_longer(-`Country/Region`, names_to = "date", values_to = "num")
death %>%
dplyr::filter(`Country/Region` %in% c('US')) %>%
select(`Country/Region`, "1/22/20":ncol(death))
death %>%
dplyr::filter(`Country/Region` %in% c('US')) %>%
select(`Country/Region`, "1/22/20":ncol(death)) %>%
group_by(`Country/Region`)
death %>%
dplyr::filter(`Country/Region` %in% c('US')) %>%
select(`Country/Region`, "1/22/20":ncol(death)) %>%
group_by(`Country/Region`) %>%
summarise_each(funs(sum))
death %>%
dplyr::filter(`Country/Region` %in% c('US')) %>%
select(`Country/Region`, "1/22/20":ncol(death)) %>%
group_by(`Country/Region`) %>%
summarise_each(funs(sum))  %>%
pivot_longer(-`Country/Region`, names_to = "date", values_to = "num")
runApp()
world <- geojson_read("custom.geo.json", what = "sp")
url <- "https://www.worldometers.info/coronavirus/#countries"
#html <- read_html("https://www.worldometers.info/coronavirus/#countries")
html <- read_html(url)
temp <- html %>%
html_nodes(xpath = '//table[@id = "main_table_countries_today"]')
title <- temp %>% html_nodes("th") %>%
html_text(trim = T)
list_data <- temp %>%  html_nodes("td") %>%
html_text(trim = T) %>%
gsub(",","",.)
data <- matrix(list_data, ncol = length(title), byrow = T) %>% as_tibble()
data
colnames(data) <- title
data <- data[9:nrow(data), 2:ncol(data)]
data_total <- data[which(data[,1] == "Total:"), ]
data <- data[which(data[,1] != "Total:"), ]
data[, 2:ncol(data)] <- apply(data[, 2:ncol(data)], 2, as.numeric)
data <- rename_countries(data)
data
data <- data %>% group_by(`Country,Other`) %>%
summarise(TotalCases = sum(TotalCases),
NewCases = sum(NewCases),
TotalDeaths = sum(TotalDeaths),
NewDeaths = sum(NewDeaths),
TotalRecovered = sum(TotalRecovered),
ActiveCases = sum(ActiveCases),
`Serious,Critical` = sum(`Serious,Critical`))
summ <- data_total[nrow(data_total),]
data
summ <- data_total[nrow(data_total),]
data <- data %>% rename("Country/Other" = "Country,Other") %>%
dplyr::filter(! "Country/Other" %in% c("World","Europe","Asia","North America") )
data_Map <- world[world$name %in% data$`Country/Other`, ]
geo_data <- data[order(match(data$`Country/Other`, data_Map$name)), ]
geo_data
confirm <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
death <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
recover <- read_csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"))
r <- GET("https://covidtracking.com/api/states/daily")
stop_for_status(r)
json <- content(r, as = "text")
state <- fromJSON(json) %>%
dplyr::mutate(date = ymd(date))
fromJSON(json)
fromJSON(json) %>% tibble()
state <- fromJSON(json) %>% tibble() %>%
dplyr::mutate(date = ymd(date))
state
r <- GET("https://covidtracking.com/api/states")
stop_for_status(r)
json <- content(r, as = "text")
state_current <- fromJSON(json)
state_current
state_map <- state_current %>%
dplyr::filter(state %in% datasets::state.abb)
r <- GET("https://covidtracking.com/api/states")
stop_for_status(r)
json <- content(r, as = "text")
state_current <- fromJSON(json)
state_current
runApp()
runApp()
runApp()
r <- GET("https://covidtracking.com/api/states")
stop_for_status(r)
json <- content(r, as = "text")
state_current <- fromJSON(json)
state_map <- state_current %>%
dplyr::filter(state %in% datasets::state.abb)
state_current
r <- GET("https://covidtracking.com/api/states")
#stop_for_status(r)
json <- content(r, as = "text")
state_current <- fromJSON(json)
state_current
runApp()
runApp()
#options(encoding = "UTF-8")
#setwd('C:/Users/98455/Desktop/winter_SY/STA141B/Final Project')
source("helpers.R")
list2 <- read_daily_data()
confirm <- list2[[1]]
death <- list2[[2]]
recover <- list2[[3]]
state <- list2[[4]]
runApp()
runApp()
runApp()
runApp()
runApp()
USmap("https://covidtracking.com/api/states")
USmap("https://covidtracking.com/api/states")
#options(encoding = "UTF-8")
#setwd('C:/Users/98455/Desktop/winter_SY/STA141B/Final Project')
source("helpers.R")
USmap("https://covidtracking.com/api/states")
#options(encoding = "UTF-8")
#setwd('C:/Users/98455/Desktop/winter_SY/STA141B/Final Project')
source("helpers.R")
world <- geojson_read("custom.geo.json", what = "sp")
list <- read_coro_data("https://www.worldometers.info/coronavirus/#countries", world)
data_Map <- list[[1]]
corona_data <- list[[2]]
summ <- list[[3]]
list2 <- read_daily_data()
confirm <- list2[[1]]
death <- list2[[2]]
recover <- list2[[3]]
state <- list2[[4]]
Draw_world_map(data_Map, corona_data)
countrymap(input$province)
#paste(news[input$country2], sep = "<br/>")
news[input$country2] %>% unlist() %>% reduce(paste0)
datatable(corona_data %>% arrange(desc(TotalCases)),
colnames = c("Country/Other", "TotalÂ Cases", "NewÂ Cases",
"TotalÂ Deaths", "NewÂ Deaths", "TotalÂ Recovered",
"ActiveÂ Cases", "Serious/Critical"),
class = 'order-column',
style = "bootstrap", fillContainer = FALSE, filter = 'top',
options = list(pageLength = 10, autoWidth = F)) %>%
formatStyle(columns = c(1,2,3,4,5,6,7,8,9), width='250px')
USmap("https://covidtracking.com/api/states")
USmap("https://covidtracking.com/api/states")
USmap("https://covidtracking.com/api/states")
runApp()
runApp()
runApp()
